#!/usr/bin/env node

let { writeFile, readFile, copyFile, unlink } = require('fs').promises
let { basename, join } = require('path')
let posthtml = require('posthtml')
let makeDir = require('make-dir')
let Bundler = require('parcel-bundler')
let crypto = require('crypto')

const SRC = join(__dirname, 'src')
const DIST = join(__dirname, 'dist')

async function compileAssets () {
  let uikitBundler = new Bundler(join(__dirname, 'src', 'uikit.pug'), {
    sourceMaps: false
  })
  let bundle = await uikitBundler.bundle()

  function findAssets (step) {
    return Array.from(step.childBundles).reduce((all, i) => {
      return all.concat(findAssets(i))
    }, [step.name])
  }
  let assets = findAssets(bundle)
  return function getAsset (regexp) {
    return assets.find(i => regexp.test(i))
  }
}

async function copyWellKnown () {
  let wellFrom = join(__dirname, 'src', 'well-known')
  let wellTo = join(DIST, '.well-known')
  let files = ['favicon.ico', 'robots.txt']
  await makeDir(join(DIST, '.well-known'))
  await Promise.all(files
    .map(i => copyFile(join(wellFrom, i), join(DIST, i)))
    .concat([
      join(wellFrom, 'security.txt.asc'), join(wellTo, 'security.txt')
    ]))
}

async function generateWebManifest (getAsset) {
  let json = JSON.parse(
    await readFile(join(SRC, 'base', 'manifest.webmanifest'))
  )
  json.icons[0].src = '/' + basename(getAsset(/196\..*\.png/))
  json.icons[1].src = '/' + basename(getAsset(/512\..*\.png/))
  let text = JSON.stringify(json)
  let hash = crypto.createHash('md5').update(text).digest('hex').slice(0, 8)
  let name = `manifest.${ hash }.webmanifest`
  await writeFile(join(DIST, name), text)
  return '/' + name
}

async function updateHtml (webmanifest) {
  let [html] = await Promise.all([
    readFile(join(DIST, 'uikit.html')),
    makeDir(join(DIST, 'uikit'))
  ])
  function htmlPlugin (tree) {
    tree.match({ attrs: { rel: 'icon', sizes: '512x512' } }, () => {
      return { tag: 'link', attrs: { rel: 'manifest', href: webmanifest } }
    })
  }
  let fixed = posthtml().use(htmlPlugin).process(html, { sync: true }).html
  await Promise.all([
    writeFile(join(DIST, 'uikit', 'index.html'), fixed),
    unlink(join(DIST, 'uikit.html'))
  ])
}

async function build () {
  let [getAsset] = await Promise.all([
    compileAssets(),
    copyWellKnown()
  ])
  let webmanifest = await generateWebManifest(getAsset)
  await updateHtml(webmanifest)
}

build().catch(e => {
  process.stderr.write(e.stack + '\n')
  process.exit(1)
})
