#!/usr/bin/env node

import chalk from 'chalk'

import generateWebManifest from './steps/generate-web-manifest.js'
import downloadProject from './steps/download-project.js'
import findFilesInCSS from './steps/find-files-in-css.js'
import cleanBuildDir from './steps/clean-build-dir.js'
import copyWellKnown from './steps/copy-well-known.js'
import compressFiles from './steps/compress-files.js'
import compileAssets from './steps/compile-assets.js'
import repackScripts from './steps/repack-scripts.js'
import getChatUsers from './steps/get-chat-users.js'
import createLayout from './steps/create-layout.js'
import updateHtml from './steps/update-html.js'
import buildDocs from './steps/build-docs.js'
import readJsdoc from './steps/read-jsdoc.js'
import readDocs from './steps/read-docs.js'
import buildApi from './steps/build-api.js'

async function prepareHtml () {
  await cleanBuildDir()
  let [assets, chatUsers] = await Promise.all([
    compileAssets(),
    getChatUsers()
  ])
  let [webmanifest, filesFromCSS] = await Promise.all([
    generateWebManifest(assets),
    findFilesInCSS(assets),
    copyWellKnown(assets),
    repackScripts(assets)
  ])
  let uikit = await updateHtml(assets, webmanifest, filesFromCSS)
  let layout = await createLayout(uikit, chatUsers)
  return [assets, layout]
}

async function prepareContent () {
  await Promise.all([
    downloadProject('logux-docs'),
    downloadProject('logux-core'),
    downloadProject('logux-server'),
    downloadProject('logux-client'),
    downloadProject('logux-redux')
  ])
  let [guides, nodeJsdoc, webJsdoc] = await Promise.all([
    readDocs(),
    readJsdoc('logux-server', 'logux-core'),
    readJsdoc('logux-client', 'logux-redux', 'logux-core')
  ])
  return [guides, nodeJsdoc, webJsdoc]
}

async function build () {
  let [[assets, layout], [guides, nodeJsdoc, webJsdoc]] = await Promise.all([
    prepareHtml(),
    prepareContent()
  ])
  await Promise.all([
    buildDocs(assets, layout, guides),
    buildApi(assets, layout, 'Node API', nodeJsdoc),
    buildApi(assets, layout, 'Web API', webJsdoc)
  ])
  await compressFiles(assets)
}

build().catch(e => {
  process.stderr.write(chalk.red(e.stack) + '\n')
  process.exit(1)
})
