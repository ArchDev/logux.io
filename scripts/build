#!/usr/bin/env node

let { writeFile, readFile, copyFile, unlink } = require('fs').promises
let { basename, join, extname } = require('path')
let { promisify } = require('util')
let postcssUrl = require('postcss-url')
let posthtml = require('posthtml')
let makeDir = require('make-dir')
let Bundler = require('parcel-bundler')
let postcss = require('postcss')
let crypto = require('crypto')
let zlib = require('zlib')

let gzip = promisify(zlib.gzip)

const SRC = join(__dirname, '..', 'src')
const DIST = join(__dirname, '..', 'dist')
const NON_MOBILE = [/edit.[^/]+.svg$/]

async function compileAssets () {
  let uikitBundler = new Bundler(join(SRC, 'uikit.pug'), {
    sourceMaps: false
  })
  let bundle = await uikitBundler.bundle()
  function findAssets (step) {
    return Array.from(step.childBundles).reduce((all, i) => {
      return all.concat(findAssets(i))
    }, [step.name])
  }
  let assets = findAssets(bundle)
  return {
    get (regexp) {
      return assets.filter(i => regexp.test(i))
    },
    find (regexp) {
      return assets.find(i => regexp.test(i))
    },
    remove (path) {
      assets = assets.filter(i => i !== path)
    },
    add (path) {
      assets = assets.concat([path])
    }
  }
}

async function copyWellKnown (assets) {
  let wellFrom = join(SRC, 'well-known')
  let wellTo = join(DIST, '.well-known')
  let files = ['favicon.ico', 'robots.txt']
  await makeDir(join(DIST, '.well-known'))
  await Promise.all(files
    .map(i => copyFile(join(wellFrom, i), join(DIST, i)))
    .concat([
      copyFile(join(wellFrom, 'security.txt.asc'), join(wellTo, 'security.txt'))
    ]))
  for (let file of files) assets.add(join(DIST, file))
  assets.add(join(wellTo, 'security.txt'))
}

async function generateWebManifest (assets) {
  let json = JSON.parse(
    await readFile(join(SRC, 'base', 'manifest.webmanifest'))
  )
  json.icons[0].src = '/' + basename(assets.find(/196\..*\.png$/))
  json.icons[1].src = '/' + basename(assets.find(/512\..*\.png$/))
  let text = JSON.stringify(json)
  let hash = crypto.createHash('md5').update(text).digest('hex').slice(0, 8)
  let name = `manifest.${ hash }.webmanifest`
  await writeFile(join(DIST, name), text)
  assets.add(join(DIST, name))
  return { url: '/' + name, theme: json.theme_color }
}

async function findFilesInCSS (assets) {
  let collected = []
  let fileCollector = postcssUrl({
    url ({ url }) {
      collected.push(url)
      return url
    }
  })
  await Promise.all(assets.get(/\.css$/).map(async file => {
    let css = await readFile(file)
    await postcss([fileCollector]).process(css, { from: file })
  }))
  return collected
}

async function updateHtml (assets, manifest, preloadFiles) {
  let [html] = await Promise.all([
    readFile(join(DIST, 'uikit.html')),
    makeDir(join(DIST, 'uikit'))
  ])
  function htmlPlugin (tree) {
    tree.match({ attrs: { rel: 'icon', sizes: '512x512' } }, () => {
      return [
        { tag: 'link', attrs: { rel: 'manifest', href: manifest.url } },
        { tag: 'meta', attrs: { name: 'theme-color', content: manifest.theme } }
      ].concat(preloadFiles.map(url => ({
        tag: 'link',
        attrs: {
          rel: 'preload',
          href: url,
          as: extname(url) === '.woff2' ? 'font' : 'image',
          media: NON_MOBILE.some(i => i.test(url)) && '(min-width: 941px)',
          crossorigin: true
        }
      })))
    })
  }
  let fixed = posthtml().use(htmlPlugin).process(html, { sync: true }).html
  let oldFile = join(DIST, 'uikit.html')
  let newFile = join(DIST, 'uikit', 'index.html')
  await Promise.all([
    writeFile(newFile, fixed),
    unlink(oldFile)
  ])
  assets.remove(oldFile)
  assets.add(newFile)
}

async function compressAssets (assets) {
  await Promise.all(assets
    .get(/\.(js|css|ico|html|webmanifest|svg|txt)$/)
    .map(async path => {
      let content = await readFile(path)
      let compressed = await gzip(content, { level: 9 })
      await writeFile(path + '.gz', compressed)
    })
  )
}

async function build () {
  let assets = await compileAssets()
  let [webmanifest, filesFromCSS] = await Promise.all([
    generateWebManifest(assets),
    findFilesInCSS(assets),
    copyWellKnown(assets)
  ])
  await updateHtml(assets, webmanifest, filesFromCSS)
  await compressAssets(assets)
}

build().catch(e => {
  process.stderr.write(e.stack + '\n')
  process.exit(1)
})
