#!/usr/bin/env node

let chalk = require('chalk')

let generateWebManifest = require('./steps/generate-web-manifest')
let downloadProject = require('./steps/download-project')
let findFilesInCSS = require('./steps/find-files-in-css')
let cleanBuildDir = require('./steps/clean-build-dir')
let copyWellKnown = require('./steps/copy-well-known')
let compressFiles = require('./steps/compress-files')
let compileAssets = require('./steps/compile-assets')
let repackScripts = require('./steps/repack-scripts')
let createLayout = require('./steps/create-layout')
let buildGuides = require('./steps/build-guides')
let readGuides = require('./steps/read-guides')
let updateHtml = require('./steps/update-html')
let readJsdoc = require('./steps/read-jsdoc')
let buildApi = require('./steps/build-api')

async function prepareHtml () {
  let assets = await compileAssets()
  let [webmanifest, filesFromCSS] = await Promise.all([
    generateWebManifest(assets),
    findFilesInCSS(assets),
    copyWellKnown(assets),
    repackScripts(assets)
  ])
  let uikit = await updateHtml(assets, webmanifest, filesFromCSS)
  let layout = await createLayout(uikit)
  return [assets, layout]
}

async function prepareContent () {
  await Promise.all([
    downloadProject('logux'),
    downloadProject('logux-core'),
    downloadProject('logux-server'),
    downloadProject('logux-client'),
    downloadProject('logux-redux')
  ])
  let [guides, nodeJsdoc, webJsdoc] = await Promise.all([
    readGuides(),
    readJsdoc('logux-server', 'logux-core'),
    readJsdoc('logux-client', 'logux-redux', 'logux-core')
  ])
  return [guides, nodeJsdoc, webJsdoc]
}

async function build () {
  await cleanBuildDir()
  let [[assets, layout], [guides, nodeJsdoc, webJsdoc]] = await Promise.all([
    prepareHtml(),
    prepareContent()
  ])
  await Promise.all([
    buildGuides(assets, layout, guides),
    buildApi(assets, layout, 'Node API', nodeJsdoc),
    buildApi(assets, layout, 'Web API', webJsdoc)
  ])
  await compressFiles(assets)
}

build().catch(e => {
  process.stderr.write(chalk.red(e.stack) + '\n')
  process.exit(1)
})
