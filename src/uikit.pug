doctype html
html( lang="en" )
  head
    meta( charset="utf-8" )
    title Logux.io UI Kit
    include head.pug
  body
    - var category = 'guide'
    include header/header.pug
    script( async src="/uikit.js" )
    article.text
      h1.text_title Logux.io UI Kit
      p.text_block Theme switcher: <a href="#">auto</a>, <a href="#dark">dark</a>, <a href="#light">light</a>.
      p.text_block Logux <strong>actions</strong> are very similar to <a href="#">Redux actions</a>. JSON objects describe what was changed in <a href="#">the application state</a>. Logux Core provides <code class="text_code">BaseNode</code> class, which will synchronize actions between two nodes. <code class="text_code">ClientNode</code> and <code class="text_code">ServerNode</code> classes extend this class with small behaviour changes.
      ol.text_list
        li
          p They must have type property with a string value.
        li
          p You can use only string, number, boolean, null, array, and object as values.
      ul.text_list
        li
          p The <code class="text_code">standard Redux</code> way to dispatch actions. Action will not be sent to the server or another browser tab. There is no way to set action’s meta in this method.
          pre store.dispatch(action)
        li
          p <code class="text_code">preadd</code>: action is going to be added to the log. It is the only way to set <a href="#" class="text_code-link"><code class="text_code">meta.reasons</code></a>. This event will not be called for cross-tab actions added in a different browser tab.
      h2.text_subtitle Subtitle
      p.text_block By default, the server state is opposite to client state. Because server-side cache could be very big, the database is the single source of truth. You can use any database with Logux.
      p.text_block Logux Server removes action after processing and always look to a database for the latest value. As a result, you can’t undo actions on the server.
      pre.text_example const action = { type: 'user/add' }
      p.text_block However, you can change this behavior and have event sourcing on the server too.
      h2.text_subtitle <code>add()</code>
      h3.text_subsubtitle Parameters
      table.text_table
        tr
          th Name
          th Type
          th Description
        tr
          td <code class="text_code">nodeId</code>
          td <code><a href="#">string</a></code>
          td Unique current machine name.
        tr
          td <code class="text_code">reason</code>
          td <code><a href="#">string</a> = 'error'</code>
          td Optional code for reason.
        tr
          td <code class="text_code">options</code>
          td <code><a href="#">object</a>?</code>
          td Synchronization options.
      h3.text_subsubtitle Returns
      p.text_block <code class="text_code"><a href="#">Promise</a>&lt;<a href="#">boolean</a>></code>
      a.button( href="#" ) Next chapter →
