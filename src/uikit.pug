include switcher/switcher.pug

doctype html
html( lang="en" )
  head
    meta( charset="utf-8" )
    title Logux.io UI Kit
    meta( name="viewport" content="width=device-width" )
    link( rel="shortcut icon" href="/base/32.png" sizes="32x32" )
    link( rel="icon" href="/base/196.png" sizes="196x196" )
    link( rel="icon" href="/base/512.png" sizes="512x512" )
    link( rel="mask-icon" href="/base/pinned.svg" color="#ffc40d" )
    link( rel="apple-touch-icon" href="/base/apple.png" )
    meta( name="apple-mobile-web-app-title" content="Logux" )
    script( defer src="/common.js" )
    script( defer src="/guide.js" )
    link( rel="stylesheet" href="/common.sss" )
    link( rel="stylesheet" href="/guide.sss" )
    meta( property="og:image" content="/base/og.png" )
    link( rel="preconnect" href="https://sidecar.gitter.im/" media="(min-width:941px)" )
  body.layout
    - var category = 'guide'
    .layout_header
      include header/header.pug
    .chat
      a.button( href="https://gitter.im/logux/logux" rel="me" )
        .chat_icon
        | Join chat
    .layout_menu
      aside.menu

    .layout_body
      article.text
        .edit
          h1.title Logux.io UI Kit
          a.edit_link( href="https://github.com/logux/logux.io" title="Edit the page on GitHub" )
        p.text_block Logux <strong>actions</strong> are very similar to <a href="#">Redux actions</a>. JSON objects describe what was changed in <a href="#">the application state</a>. Logux Core provides <code class="code">BaseNode</code> class, which will synchronize actions between two nodes. <code class="code">ClientNode</code> and <code class="code">ServerNode</code> classes extend this class with small behaviour changes.
        +switcher('Node.js', 'Ruby on Rails')
          +switcher_section
            ol.list
              li
                p.text_block They must have type property with a string value.
              li
                p.text_block You can use only string, number, boolean, null, array, and object as values.
            ul.list
              li
                p.text_block The <code class="code">standard Redux</code> way to dispatch actions. Action will not be sent to the server or another browser tab. There is no way to set action’s meta in this method.
                pre.code-block server.undo(meta, <span class="code-block_string">'too late'</span>)
              li
                p.text_block <code class="code">preadd</code>: action is going to be added to the log. It is the only way to set <a href="#" class="code"><code>meta.reasons</code></a>. This event will not be called for cross-tab actions added in a different browser tab.
            p.text_block To stop the server press <kbd class="code">Command</kbd>+<kbd class="code">.</kbd> on Mac OS X and <kbd class="code">Ctrl</kbd>+<kbd class="code">C</kbd> on Linux and Windows.
          +switcher_section
            p.text_block Clients can also create <code class="code">logux/undo</code> to revert action and ask other clients to revert it (if the developer allowed to re-send these actions on the server).
        h2#subtitle.title
          a.title_link( href="#subtitle" title="Direct link to section" ) Subtitle
        p.text_block By default, the server state is opposite to client state. Because server-side cache could be very big, the database is the single source of truth. You can use any database with Logux.
        p.text_block Logux Server removes action after processing and always look to a database for the latest value. As a result, you can’t undo actions on the server.
        +switcher('Node.js', 'Ruby on Rails', 'Any other HTTP server')
          +switcher_section
            p.text_block Using Logux Server
            pre.code-block.
              <span class="code-block_keyword">const</span> { Server } = <span class="code-block_built_in">require</span>(<span class="code-block_string">'@logux/server'</span>)

              <span class="code-block_function"><span class="code-block_keyword">function</span> <span class="code-block_title">usersReducers</span> (<span class="code-block_params">state = { }, action</span>) </span>{
                <span class="code-block_keyword">if</span> (action.type === <span class="code-block_string">'user/name'</span>) {
                  <span class="code-block_keyword">return</span> { ...state, <span class="code-block_attr">name</span>: action.name }
                } <span class="code-block_keyword">else</span> {
                  <span class="code-block_keyword">return</span> state
                }
              }

              server.auth(<span class="code-block_function">(<span class="code-block_params">userId, token</span>) =&gt;</span> {
                <span class="code-block_comment">// Allow only local users until we will have a proper authentication</span>
                <span class="code-block_keyword">return</span> process.env.NODE_ENV === <span class="code-block_string">'development'</span>
              })
            p.text_block However, you can change this behavior and have event sourcing on the server too.
          +switcher_section
            p.text_block Use Logux Rails gem
          +switcher_section
            p.text_block Write your own library
        h2#add.title
          a.title_link( href="#add" title="Direct link to section" ) <code>add()</code></a>
        h3#parameters.title
          a.title_link( href="#parameters" title="Direct link to section" ) Parameters
        table.table
          tr
            th Name
            th Type
            th Description
          tr
            td <code class="code">nodeId</code>
            td <code><a href="#">string</a></code>
            td Unique current machine name.
          tr
            td <code class="code">reason</code>
            td <code><a href="#">string</a> = 'error'</code>
            td Optional code for reason.
          tr
            td <code class="code">options</code>
            td <code><a href="#">object</a>?</code>
            td Synchronization options.
        h3#returns.title
          a.title_link( href="#returns" title="Direct link to section" ) Returns
        p.text_block <code><a href="#">Promise</a>&lt;<a href="#">boolean</a>></code>

      footer.footer
        section.footer_section
          h3.footer_title About
          .footer_link <a href="/guide/">Guide</a>
          .footer_link <a href="/api/">API</a>
        section.footer_section
          h3.footer_title Community
          .footer_link <a href="https://github.com/logux">GitHub</a>
          .footer_link <a href="https://twitter.com/logux_io">Twitter</a>
          .footer_link <a href="https://gitter.im/logux/logux">Gitter</a>
          .footer_link <a href="https://twitter.com/linguopunk">Linguopunk</a>
        section.footer_section.is-author
          .footer_text Under the <a href="https://github.com/logux/logux.io/blob/master/LICENSE" rel="license">MIT</a> license
          .footer_text Sponsored by <a href="https://evilmartians.com/">Evil Martians</a>
          a.footer_lurkers( href="https://evilmartians.com/" aria-hidden="true" tabindex="-1" )
